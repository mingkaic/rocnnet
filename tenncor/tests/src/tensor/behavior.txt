// TENSORSHAPE
A000 - copy and move creates/moves a data equivalent shape
A001 - as_list returns a shallow copy of the dimension values provided during construction
A002 - n_elems returns the product of all dimension value. non-fully defined shapes have n_elems of 0
        n_known obtains the product of all known dimensions
A003 - rank returns the length of the dimension vector
A004 - tensorshape is compatible if one of the shapes are undefined,
        or the tensors are of the same rank and dimension values equal for defined dimensions (> 0)
A005 - a tensorshapes is partially defined if it has a rank > 0
A006 - a tensorshapes is fully defined if it is at least partially defined
        and all its dimensional values are defined (> 0)
A007 - a tensorshape assert its rank wrt to another value or shape.
        undefined shapes can have any rank
A008 - a tensorshape can be undefined explicitly
A009 - tensorshape merge return the most defined most defined shape
        (that is dimension values > 0 are preferred)
        merging incompatible tensorshapes results in a logic error
A010 - a tensorshape can have its leading and trailing 1s removed
A011 - two tensorshapes can concatenate to form a tensorshape depending on the order of
        concatenation assuming both tensors are at least partially defined
A012 - a tensorshape's rank can be manipulated by padding with ones or clipping

// TENSOR
B000 - default tensor construction creates an undefined tensor
        scalar tensor constructrion creates allocates a tensor of rank 1, nelems = 1
        constructing with a fully_defined_shape is allocated on construction
        otherwise tensor is not allocated
        unallocated tensors have 0 bytes, allocated tensors have bytes of n_elems * sizeof(type)
B001 - copy and move creates/moves a tensor of equivalent shape and raw data
B002 - tensor can access through a shallow copy of the shape, or through shape info
B003 - two tensors are the same size if their allowed shapes are compatible or
        they are both allocated and their trimmed shapes are compatible
B004 - two tensors are compatible if their alloc_shape if allocated (or allowed_shape) are compatible
B005 - a tensor is compatible with a data vector if data is compatible
        if data.size() == alloc_shape if allocated (or allowed_shape) size
        loosely compatible if data.size() < alloc_shape if allocated (or allowed_shape) size
        unmet condition returns undefined optional
B006 - guess shape return a shape if the shape has n_elems == data.size() and is compatible
        with allowed_shape otherwise return undefined optional
        loosely guess return a shape if n_elems < data.size() and is compatible
        with allowed_shape shape otherwise return undefined optional
B007 - tensors coordinates <c0, c1, ..., cn> are mapped to
        output tensor vector with shape <d0, d1, ..., dn> by sum_i=0:n(product_j=0:i(dj) * ci)
B008 - reshape changes clips or pads raw data with zeros if the tensor is allocated
        if this is nonfully defined, it will not be allocated
        additionally allowed shape is undated to be more defined
B009 - default allocate (no provided shape) returns false if allowed shape is not fully defined.
        otherwise it is allocated. will not reallocate if already allocated
B010 - deallocation fails if tensor is not allocated,
        otherwise alloc_shape must be undefined and raw_data is nullptr
B011 - allocate will fail if provided shape is not compatible with allowed shape
        allocate will not reallocate if this is allocated and shape is identical to current allocated shape
        otherwise allocate may reallocate
B012 - copy_from another tensor will return true if other tensor is allocated
        and shape is fully defined. resulting tensor will have the same value as
        other within specified shape dimensions, data not specified by other is 0

// TENSOR_HANDLER
C000 - transfer function takes output tensor and some argument tensors.
        transfer will throw error if output shape is incompatible with shaper result
C001 - constant initializer fills a tensor with a particular scalar defined at the construction of initializer
C002 - random initializer
C003 - copying and moving transfer, const_init, rand_uniform creates/moves the shaper and forward functions