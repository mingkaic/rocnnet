// REACTIVE BEHAVIOR
A000 - copying subjects do not copy over audiences
        moving subjects move over audiences
        subjects without audience will return false if it has no observers
A001 - subjects notify all observers
        if UNSUBSCRIBE is called, then observer will suicide via commit_sudoku
        if UPDATE is called, then observer will update via
        public update with subject being its input
A002 - destroying a subject will destroy their observers via UNSUBSCRIBE update,
        and via commit_sudoku
A003 - attaching observer to subject at index means notifying the
        observer's protected update is triggered with calling subject and the index specified
        attaching does nothing to update observer's dependency (not tested)
A004 - detaching observer with index mean the above behavior will not hold for the specific index
        detaching observer without index will prevent above behavior from holding
        for any specific index to observer
        detaching does nothing to update observer's dependency (not tested)

A005 - constructing observer with dependencies should automatically attach
        constructed observer to designated subjects
A006 - copying/moving observers copy/move over dependencies
A007 - add_dependency with observer attaches observer to subject with index = dependencies_.size()
        additionally, push subject back to dependencies
A008 - remove_dependency with observer detaches observer from subject at specified index
        dependency at index is set to nullptr. trim all nullptrs from end of dependencies
A009 - replace_dependency at index detaches the last subject at index, attaches new subject at index
        and replace subject in dependencies at index
A010 - destroying an observer will detach the observer from its subjects via a detach call

// NODE BEHAVIOR
B000 - cloning inode creates another node of the same label, but different uid,
        moving prevents coping over uid
B001 - a uid is unique for every instance of node
B002 - label is a non-unique string assigned during construction,
        name is the concatenation of uid and label

// CONNECTOR BEHAVIOR
C000 - copying connector copies over graph id if the original connector has at least one
        connector dependency (conform to definition of same graph)
        moving moves over graph id regardless, moving gid_ will nullptr the original gid_ pointer
        creating a connector of a connector with null gid_ (possible with moving) will throw
C001 - connector name is the name of the connecting node in <> braces and
        its dependencies' labels separated by commas in () brackets
C002 - connector is the same graph as another connector if they share a common connector
        along its dependency graph.
C003 - connector potential descendent calls both this and other connnector get_leaves to get leaf set

// IMMUTABLE BEHAVIOR
D000 - cloning and moving immutable copies and moves over data, Nf_ and ginit_
D001 - immutable A is a potential descendent of connector B if A's leaf set is a subset of B's leaf set
D002 - immutable tensor shape is the result of the shaper function
D003 - immutable tensor initializes its tensor from the forward transfer functions if all its arguments are good
        otherwise good status is false
D004 - immutable dies when any of its dependencies dies
D005 - temporary_eval evaluates the resulting value from node target (taking target's value as scalar 1)
        up to calling node. tensor is allocated and is owned in calling scope.
        (meaning deleting the resulting tensor should have no adverse affect on any object state)
D006 - immutable get_leaves return a map from leaf to nullptr
D007 - get_leaf (given an input argument of leaf A) returns the node mapped by A in
        back_map (provided during construction). leaf A is back_map's second argument.
D008 - get_gradient applies jacobian transformations regardless of its input leaf node
        if wrt is this, base result (without jacobian) is scalar 1,
        else if wrt is not a leaf but is a potential descendent, base result is evaluation from wrt to this
        else if wrt is not a leaf and isn't a potential descendent, the base result is scalar 0
        otherwise the base result is the non-null value mapped from gcache
D009 - update explicitly runs its forward transfer function with current depdendency states as its argument

// ELEMENTARY BEHAVIORS

// TRANSFORM BEHAVIORS

// MATMUL BEHAVIOR




// BASE OPERATION NODE
F000 - operation holding poorly defined tensors (null inputs) return null on evaluation
F001 - operation must reuse its gradient object
F002 - exposing operation nodes with null/invalid tensors will fail

F100 - elementary operations must error on exposure when not all of its leaves are initialized
F101 - binary operations must fail when its argument shapes are do not match (by the rules of the operation) at constructing if shape_eval is enabled, or at exposure on all others
F102 - elementary binary operations argument shapes must be equivalent (same rank, and dimensional values)
F103 - matrix operations only takes 2-D tensors
F104 - matrix operations argument shapes must match by according to the following (<m, n>, <k, m>) where m is indice 0, and 1 for first and second argument respectively (this indicates column is index 0)

F200 - each graph instance builds from a single variable; deleting graph will not change the variable
F201 - graphs created from append_graph methods will preserve the input graph

F300 - conditional's eval, shape, gradient, and jacobian are obtained from its active dependency (except for jacobian, and gradient; undefined behavior for now)
F301 - not_zero's active dependency is non-zero (scalar or otherwise) and is initialized (get_eval is non-null)
F302 - push_toggle activation will notify its dependencies of activation once, then return to default state
F303 - push_toggle activation value will linger until explicitly called to update again
F304 - when binding bindable_toggle, bound variables will reset and update previously active toggles
F305 - binding toggles will return a unique value dictating unique bind relationships; different relationships have different bound vector

// VARIABLE LEAF NODES
D100 - ileaf inheriteds should auto notify when initialized or reinitialized
D200 - variables auto initialize scalar on construction
D201 - variable's gradient is a one variable
D300 - assigning raw data or tensors to placeholders will initialize it
D301 - placeholders can be initialized at construction, this initializer will be promptedly destroyed
D302 - placeholder's gradient is a zero constant
D400 - constants must self destruct when its subject loses all its subscribers
D401 - constants are always initialized
D402 - constant's gradient is a zero constant

// VARIABLE NODE EXECUTORS
G000 - iexecutor should prevent its destination from being updated when its source nodes notify
G001 - iexecutor should remove its source nodes when they are destroyed
G002 - iexecutor should remove its destination nodes when they are destroyed
G003 - group should execute its executors in order of when they are added
