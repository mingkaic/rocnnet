// REACTIVE BEHAVIOR
A000 - copying subjects do not copy over audiences
        moving subjects move over audiences
        subjects without audience will return false if it has no observers
A001 - subjects notify all observers
        if UNSUBSCRIBE is called, then observer will suicide via commit_sudoku
        if UPDATE is called, then observer will update via
        public update with subject being its input
A002 - destroying a subject will destroy their observers via UNSUBSCRIBE update,
        and via commit_sudoku
A003 - attaching observer to subject at index means notifying the
        observer's protected update is triggered with calling subject and the index specified
        attaching does nothing to update observer's dependency (not tested)
A004 - detaching observer with index mean the above behavior will not hold for the specific index
        detaching observer without index will prevent above behavior from holding
        for any specific index to observer
        detaching does nothing to update observer's dependency (not tested)

A005 - constructing observer with dependencies should automatically attach
        constructed observer to designated subjects
A006 - copying/moving observers copy/move over dependencies
A007 - add_dependency with observer attaches observer to subject with index = dependencies_.size()
        additionally, push subject back to dependencies
A008 - remove_dependency with observer detaches observer from subject at specified index
        dependency at index is set to nullptr. trim all nullptrs from end of dependencies
A009 - replace_dependency at index detaches the last subject at index, attaches new subject at index
        and replace subject in dependencies at index
A010 - destroying an observer will detach the observer from its subjects via a detach call

// NODE BEHAVIOR
B000 - cloning inode creates another node of the same label, but different uid,
        moving prevents coping over uid
B001 - a uid is unique for every instance of node
B002 - label is a non-unique string assigned during construction,
        name is the concatenation of uid and label

// LEAF BEHAVIOR
C000 - leaves clone and move copies and moves over its initialization status and data tensor
C001 - leaf get_shape returns the shape specified at construction
C002 - leaf get_eval returns a tensor of the shape specified at construction,
        the tensor's initialization status is uncertain
C003 - leaf good_status is good if the tensor is initialized, otherwise bad

// CONSTANT BEHAVIOR
D000 - constant scalar constructor initializes data as a scalar of the same value
        vector initializes tensor in vector form according to input data,
        the tensor has shape specified in constructor
        if the input vector does not match shape, clip data or pad data to fit
D001 - constant clone and move are deleted, clone and move return nullptr
D002 - constant get_gradient returns 0 scalar node
D003 - constant get_leaf returns 0 scalar node
D004 - constant get_leaves does not change referenced leaf set
D005 - constant self destructs when it loses all its subscribers if is_managed flag is off
        otherwise constant wouldnt self destruct
D006 - constant tensors are always allocated

// IVARIABLE BEHAVIOR
E000 - ivariable clone and move copy and move over initializer
E001 - ivariable can initialize when initializer is not null
E002 - ivariable get_gradient returns 1 scalar node
        if input is this otherwise return 0 scalar

// VARIABLE BEHAVIOR
F000 - variable scalar constructor is initialized
        variable constructor with no initializer specifies null init
        otherwise initializer is clone of input initializer
F001 - variable clone and move clones and moves from ivariable
F002 - variable set_initializer deletes its existing initializer
        and clones new init from input
F003 - variable get_leaf returns 1 scalar node if input leaf is this,
        otherwise return 0 scalar node
F004 - variable get_leaves adds itself to the referenced leaf set
F005 - variable initialize notifies on success.
        variable initialization succeeds when initializer is not null,
        the existing tensorshape is well defined,
        or input shape is well defined and is compatible with tensor shape

// PLACEHOLDER BEHAVIOR
G000 - placeholder specifying shape has non-null initialization,
        but has un-initialized status (is_init_)
G001 - placeholder clone and move clones and moves from ivariable
G002 - placeholder assigning raw data initializes tensor and notifies observers
G003 - placeholder assigning tensor moves input tensor to inner tensor
G004 - placeholder get_leaf returns 0 scalar node
G005 - placeholder get_leaves does not change referenced leaf set

// CONNECTOR BEHAVIOR
H000 - copying connector copies over graph id if the original connector has at least one
        connector dependency (conform to definition of same graph)
        moving moves over graph id regardless, moving gid_ will nullptr the original gid_ pointer
        creating a connector of a connector with null gid_ (possible with moving) will throw
H001 - connector name is the name of the connecting node in <> braces and
        its dependencies' labels separated by commas in () brackets
H002 - connector is the same graph as another connector if they share a common connector
        along its dependency graph.
H003 - connector potential descendent calls both this and other connnector get_leaves to get leaf set

// IMMUTABLE BEHAVIOR
I000 - cloning and moving immutable copies and moves over data, Nf_ and ginit_
I001 - immutable A is a potential descendent of connector B if A's leaf set is a subset of B's leaf set
I002 - immutable has good status if all its children are good, otherwise it's bad
I003 - immutable tensor shape is the result of the shaper function.
        bad status returns an undefined tensorshape
I004 - immutable tensor initializes its tensor from the forward transfer functions if all its arguments are good
        otherwise good status is false, bad status returns nullptr on get_eval
I005 - immutable dies when any of its dependencies dies
I006 - temporary_eval grabs the resulting node from target node up to calling node.
        the target node's value is taken as scalar 1.
I007 - immutable get_leaves return a map from leaf to nullptr
I008 - given an input of leaf A, get_leaf returns the node mapped by A in
        back_map (provided during construction). leaf A is back_map's second argument.
I009 - get_gradient calculates gradient node from any node and applies jacobian transformation appropriately
        if wrt is this, return (without jacobian) is scalar 1 node,
        else if wrt is not a leaf but is a potential descendent, return temporary_eval from wrt to this
        else if wrt is not a leaf and isn't a potential descendent, return scalar 0 node
        otherwise the base result is the non-null node mapped from gcache
I010 - update explicitly runs its forward transfer function with current depdendency states as its argument

// ELEMENTARY BEHAVIORS
J000 -
Jxxx - a inode is equal (using operator ==) to a primitive value if it is scalar shape ({1})
        and its value is equivalent to the primitive value
        same applies for not equal (!=),
        equality and inequality fails assertion if input node has bad status

// TRANSFORM BEHAVIORS
K000 -

// MATMUL BEHAVIOR
L000 -

- exposing operation nodes with null/invalid tensors will fail
- elementary operations must error on exposure when not all of its leaves are initialized
- binary operations must fail when its argument shapes are do not match (by the rules of the operation) at constructing if shape_eval is enabled, or at exposure on all others
- elementary binary operations argument shapes must be equivalent (same rank, and dimensional values)
- matrix operations only takes 2-D tensors
- matrix operations argument shapes must match by according to the following (<m, n>, <k, m>) where m is indice 0, and 1 for first and second argument respectively (this indicates column is index 0)
